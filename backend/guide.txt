📦 backend/
 ┣ 📂 Config/                  
 ┃ ┗ 📄 appsettings.json       # Stores JWT, database & API keys
 ┣ 📂 Controllers/             
 ┃ ┣ 📄 AuthController.cs      # Handles login & registration
 ┃ ┣ 📄 PortfolioController.cs # Manages user portfolios
 ┃ ┣ 📄 StockController.cs     # Fetches stock data from Polygon.io
 ┃ ┣ 📄 ImageController.cs     # Handles Cloudinary image uploads
 ┃ ┗ 📄 AiAdvisorController.cs # AI stock advice from Ollama
 ┣ 📂 CQRS/                    
 ┃ ┣ 📂 Commands/             # Command Handlers (Write Operations)
 ┃ ┃ ┣ 📄 BuyStockCommand.cs
 ┃ ┃ ┗ 📄 SellStockCommand.cs
 ┃ ┣ 📂 Queries/              # Query Handlers (Read Operations)
 ┃ ┃ ┣ 📄 GetPortfolioQuery.cs
 ┃ ┃ ┗ 📄 GetStockPriceQuery.cs
 ┃ ┗ 📄 MediatorSetup.cs       # Sets up CQRS with MediatR
 ┣ 📂 Data/                   
 ┃ ┣ 📂 Migrations/           # Database Migrations
 ┃ ┣ 📄 DataSeeder.cs         # Seeds sample users for testing
 ┃ ┣ 📄 ApplicationDbContext.cs # EF Core database setup
 ┃ ┗ 📄 EventStoreDbContext.cs # Event sourcing DB setup
 ┣ 📂 Deployment/             
 ┃ ┗ 📄 Dockerfile            # Deployment container setup
 ┣ 📂 EventSourcing/          
 ┃ ┣ 📄 EventHandler.cs       # Handles stock buy/sell events
 ┃ ┗ 📄 EventStore.cs         # Stores all stock trade events
 ┣ 📂 Gateway/                
 ┃ ┣ 📄 ExternalApiGateway.cs # Manages API calls (Polygon.io, Cloudinary)
 ┃ ┗ 📄 ServiceRegistry.cs    # Stores external service endpoints
 ┣ 📂 Middleware/             # (Optional) Custom middleware (logging, exceptions)
 ┣ 📂 Models/                 
 ┃ ┣ 📄 User.cs               # User model (Username, PasswordHash)
 ┃ ┣ 📄 Portfolio.cs          # Portfolio model (UserID, Stocks)
 ┃ ┣ 📄 Stock.cs              # Stock model (Symbol, Price, Shares)
 ┃ ┣ 📄 Transaction.cs        # Transaction model (buy/sell history)
 ┃ ┗ 📄 Image.cs              # Image model for Cloudinary
 ┣ 📂 Services/               
 ┃ ┣ 📄 AuthService.cs        # Handles authentication (JWT)
 ┃ ┣ 📄 PortfolioService.cs   # Manages buy/sell stock logic
 ┃ ┣ 📄 StockService.cs       # Calls Polygon.io for stock prices
 ┃ ┣ 📄 ImageService.cs       # Manages Cloudinary uploads
 ┃ ┗ 📄 AiAdvisorService.cs   # Calls Ollama AI for stock insights
 ┣ 📂 Tests/                  # (Optional) Unit & Integration Tests
 ┃ ┣ 📄 AuthServiceTests.cs
 ┃ ┣ 📄 PortfolioServiceTests.cs
 ┃ ┣ 📄 StockServiceTests.cs
 ┃ ┗ 📄 AiAdvisorServiceTests.cs
 ┣ 📄 backend.csproj           # Project dependencies
 ┣ 📄 backend.http             # API request testing file
 ┣ 📄 guide.txt                # Documentation guide
 ┣ 📄 Program.cs               # Main entry point for API
 ┣ 📄 README.md                # Documentation
 ┗ 📄 .gitignore               # Git ignore settings





 How to kill port in case of use:

 netstat -ano | findstr :5000
 taskkill /PID <PID> /F
